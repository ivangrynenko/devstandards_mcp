id,category,subcategory,title,description,severity,examples,references,tags,rationale,fix_guidance
DS_CSS_001,drupal_frontend,formatting,Use 2 spaces for indentation,All CSS indentation must use exactly 2 spaces. Declarations should be indented one level from their selector.,medium,"{""good"": "".selector {\n  property: value;\n}"", ""bad"": "".selector {\n    property: value;\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|indentation|whitespace,Consistent indentation improves code readability and collaboration,Configure your editor to use 2 spaces for CSS indentation. Use EditorConfig for team consistency.
DS_CSS_002,drupal_frontend,formatting,Use Unix line endings (LF),CSS files must use Unix line endings (LF) rather than Windows (CRLF) or Mac (CR) line endings.,low,"{""good"": ""Files with LF line endings"", ""bad"": ""Files with CRLF or CR line endings""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|line-endings|cross-platform,Ensures consistent file handling across different operating systems and version control,Configure your editor and git to use LF line endings. Use .gitattributes to enforce this.
DS_CSS_003,drupal_frontend,formatting,End files with single blank line,"CSS files should end with exactly one blank line, no more, no less.",low,"{""good"": "".last-rule {\n  property: value;\n}\n"", ""bad"": "".last-rule {\n  property: value;\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|file-structure,Prevents issues with file concatenation and follows POSIX standards,Configure your editor to automatically add a final newline to files.
DS_CSS_004,drupal_frontend,formatting,Remove trailing whitespace,Lines should not have any whitespace characters at the end.,low,"{""good"": "".selector {\n  property: value;\n}"", ""bad"": "".selector { \n  property: value; \n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|whitespace|cleanup,Trailing whitespace can cause version control noise and is generally untidy,Configure your editor to show and automatically remove trailing whitespace.
DS_CSS_005,drupal_frontend,formatting,Use one selector per line for multiple selectors,"When using multiple selectors, place each selector on its own line for better readability.",medium,"{""good"": "".selector-one,\n.selector-two {\n  property: value;\n}"", ""bad"": "".selector-one, .selector-two {\n  property: value;\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|selectors|readability,Improves readability and makes it easier to scan and modify selectors,"Split multi-selector rules across multiple lines, with commas at the end of each line."
DS_CSS_006,drupal_frontend,formatting,Quote attribute values in selectors,Always use quotes around attribute values in CSS selectors.,medium,"{""good"": ""input[type=\""checkbox\""]"", ""bad"": ""input[type=checkbox]""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|selectors|attributes,Quotes ensure proper parsing and are required for attribute values containing spaces or special characters,Always wrap attribute values in double quotes when writing attribute selectors.
DS_CSS_007,drupal_frontend,formatting,End declarations with semicolons,"Every CSS declaration must end with a semicolon, including the last declaration in a rule.",high,"{""good"": "".selector {\n  color: red;\n  margin: 0;\n}"", ""bad"": "".selector {\n  color: red;\n  margin: 0\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|declarations|syntax,Prevents parsing errors and ensures consistent code style,Always include semicolons after every CSS declaration.
DS_CSS_008,drupal_frontend,formatting,Use double quotes for quoted values,"When quotes are needed in CSS values, use double quotes rather than single quotes.",low,"{""good"": ""font-family: \""Helvetica Neue\"", sans-serif;"", ""bad"": ""font-family: 'Helvetica Neue', sans-serif;""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|values|quotes,Consistency with other Drupal coding standards and improved readability,Replace single quotes with double quotes in CSS string values.
DS_CSS_009,drupal_frontend,units,Prefer rem units over px,Use rem units for sizing to improve accessibility and responsive design.,medium,"{""good"": ""font-size: 1.2rem;"", ""bad"": ""font-size: 18px;""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|units|accessibility|responsive,rem units scale with user font size preferences and provide better accessibility,"Use rem units for font sizes, margins, and padding. Use PostCSS for automatic px to rem conversion."
DS_CSS_010,drupal_frontend,formatting,Omit units for zero values,Do not include units when the value is zero (0px should be 0).,low,"{""good"": ""margin: 0;"", ""bad"": ""margin: 0px;""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|values|optimization,Shorter code and universally understood since zero is zero regardless of unit,Remove units from zero values in CSS declarations.
DS_CSS_011,drupal_frontend,organization,Order properties logically,"Order CSS properties in a logical sequence: positioning, box model, then other declarations.",medium,"{""good"": "".element {\n  position: relative;\n  display: block;\n  width: 100%;\n  margin: 1rem;\n  color: red;\n}"", ""bad"": "".element {\n  color: red;\n  position: relative;\n  margin: 1rem;\n  width: 100%;\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-formatting-guidelines""]",formatting|organization|properties,Logical property ordering improves code readability and maintainability,Use CSScomb or similar tools to automatically sort CSS properties.
DS_CSS_012,drupal_frontend,architecture,Use component-based CSS architecture,"Structure CSS using SMACSS methodology with Base, Layout, Component, State, and Theme categories.",high,"{""good"": ""/* Component */\n.card {\n  display: block;\n}\n\n/* Component variant */\n.card--featured {\n  border: 2px solid blue;\n}"", ""bad"": ""/* Context-dependent styling */\n.sidebar .card {\n  display: block;\n  border: 2px solid blue;\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-architecture-for-drupal-9""]",architecture|smacss|components|modularity,"Component-based architecture creates predictable, reusable, maintainable, and scalable CSS",Refactor context-dependent styles into standalone components with modifier classes.
DS_CSS_013,drupal_frontend,naming,Use BEM-like naming for CSS classes,"Use clear naming conventions: .component-name, .component-name--variant, .component-name__sub-object.",high,"{""good"": "".card {\n}\n.card--featured {\n}\n.card__title {\n}"", ""bad"": "".cardTitle {\n}\n.card_featured {\n}\n.featuredCard {\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-architecture-for-drupal-9""]",architecture|naming|bem|conventions,Clear naming conventions communicate component relationships and make code self-documenting,"Use dashes between words, double dashes for variants, double underscores for sub-objects."
DS_CSS_014,drupal_frontend,architecture,Use .is- prefix for state classes,State classes that represent temporary appearance changes should use the .is- prefix.,medium,"{""good"": "".is-active {\n  background: blue;\n}\n.is-hidden {\n  display: none;\n}"", ""bad"": "".active {\n  background: blue;\n}\n.hidden {\n  display: none;\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-architecture-for-drupal-9""]",architecture|state|naming|conventions,Clear distinction between permanent component styles and temporary state changes,Prefix all state-related classes with .is- to clearly identify their purpose.
DS_CSS_015,drupal_frontend,architecture,Use .js- prefix for JavaScript hooks,Classes used solely for JavaScript targeting should use the .js- prefix and have no CSS styling.,medium,"{""good"": ""<!-- HTML -->\n<button class=\""button js-toggle-menu\"">Menu</button>\n\n/* CSS - no styling for .js- classes */\n.button {\n  padding: 1rem;\n}"", ""bad"": "".toggle-menu {\n  padding: 1rem;\n  /* JavaScript targets this same class */\n}""}","[""https://www.drupal.org/docs/develop/standards/css/css-architecture-for-drupal-9""]",architecture|javascript|separation|hooks,"Separates presentation from behavior, preventing CSS changes from breaking JavaScript","Add .js- prefixed classes for JavaScript targeting, separate from styling classes."
DS_CSS_016,drupal_frontend,functions,Use functional pseudo-classes for combining selectors,"Use functional pseudo-classes like :is(), :not(), or :where() to combine selectors when possible.",medium,"{""good"": "":is(.warning, .error) {\n  color: red;\n}"", ""bad"": "".warning,\n.error {\n  color: red;\n}""}","[""https://www.drupal.org/node/1887862""]",selectors|pseudo-classes|modern-css,Functional pseudo-classes provide more efficient and maintainable selector grouping,"Use :is(), :not(), or :where() for complex selector combinations where supported."
DS_CSS_017,drupal_frontend,formatting,Use space after commas in property values,Include a space after commas in property values for better readability.,low,"{""good"": ""font-family: Arial, sans-serif;\nbackground: linear-gradient(to right, red, blue);"", ""bad"": ""font-family: Arial,sans-serif;\nbackground: linear-gradient(to right,red,blue);""}","[""https://www.drupal.org/node/1887862""]",formatting|spacing|readability,Consistent spacing improves code readability and follows common CSS conventions,Add spaces after commas in multi-value CSS properties.
DS_CSS_018,drupal_frontend,rtl,Add LTR comments for directional properties,"For properties without logical property equivalents, add /* LTR */ comment and create additional RTL ruleset.",medium,"{""good"": "".element {\n  margin-left: 1rem; /* LTR */\n}\n.element:dir(rtl) {\n  margin-left: 0;\n  margin-right: 1rem;\n}"", ""bad"": "".element {\n  margin-left: 1rem;\n}""}","[""https://www.drupal.org/node/1887862""]",rtl|internationalization|accessibility|comments,Proper RTL support ensures accessibility for right-to-left language users,Add /* LTR */ comments and create corresponding RTL rulesets for directional properties.
DS_CSS_019,drupal_frontend,formatting,Place vendor prefixes before non-prefixed version,Place vendor-prefixed properties directly before their non-prefixed version.,medium,"{""good"": "".element {\n  -webkit-transform: scale(1.2);\n  transform: scale(1.2);\n}"", ""bad"": "".element {\n  transform: scale(1.2);\n  -webkit-transform: scale(1.2);\n}""}","[""https://www.drupal.org/node/1887862""]",formatting|vendor-prefixes|compatibility,Proper prefix ordering ensures the standard property overrides vendor-specific versions,Place vendor-prefixed properties immediately before the standard property.
DS_CSS_020,drupal_frontend,comments,Use Doxygen-style multi-line comments,Use Doxygen-style comments for multi-line descriptions and file headers.,medium,"{""good"": ""/**\n * @file\n * Component styles for navigation.\n *\n * This file contains styles for the main\n * navigation component including responsive\n * behavior and accessibility features.\n */"", ""bad"": ""/* Navigation styles */\n/* Contains menu and responsive code */""}","[""https://www.drupal.org/node/1887862""]",comments|documentation|doxygen,Standardized comment format improves documentation consistency and tool compatibility,Use /** */ blocks with @file annotation for comprehensive file documentation.
