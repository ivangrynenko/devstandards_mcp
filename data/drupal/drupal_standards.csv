id,category,subcategory,title,description,severity,examples,references,tags,rationale,fix_guidance
DS001,drupal_security,sql_injection,Use Database API for Queries,Never concatenate user input into SQL queries,critical,"{""good"": ""$query = $connection->select('users', 'u')->condition('name', $name);"", ""bad"": ""db_query('SELECT * FROM users WHERE name = ' . $_GET['name']);""}","[""https://www.drupal.org/docs/security/sql-injection"", ""https://owasp.org/www-community/attacks/SQL_Injection""]",security|database|sql,"SQL injection can lead to data theft, data loss, and complete system compromise",Use Drupal's Database API with placeholders or the query builder
DS002,drupal_security,xss,Escape Output in Templates,Always escape variables in Twig templates,critical,"{""good"": ""{{ title }}"", ""bad"": ""{{ title|raw }}""}","[""https://www.drupal.org/docs/security/cross-site-scripting""]",security|output|twig,XSS attacks can steal user sessions and compromise accounts,Use Twig's auto-escape or explicit escape filters
DS003,drupal_security,csrf,Use Form API CSRF Protection,Leverage Drupal's built-in CSRF tokens,high,"{""good"": ""$form['#token'] = 'my_form';"", ""bad"": ""// No CSRF protection""}","[""https://www.drupal.org/docs/security/csrf""]",security|forms,CSRF attacks can perform unauthorized actions,Always use Form API which includes CSRF protection
DS004,drupal_coding_standards,services,Service Naming Convention,Use lowercase with dots for service names,medium,"{""good"": ""mymodule.breadcrumb_builder"", ""bad"": ""MyModule.BreadcrumbBuilder""}","[""https://www.drupal.org/docs/develop/standards""]",naming|services|conventions,Consistency improves code readability,Update service definitions in .services.yml
DS005,drupal_best_practices,configuration,Use Configuration API,Store configuration properly,high,"{""good"": ""$config = \\Drupal::config('mymodule.settings');"", ""bad"": ""variable_set('mymodule_setting', $value);""}","[""https://www.drupal.org/docs/drupal-apis/configuration-api""]",configuration|api,Configuration API provides proper deployment workflow,Migrate variables to configuration system
DS006,drupal_security,access_control,Check User Permissions,Always verify user permissions before sensitive operations,critical,"{""good"": ""if (\\Drupal::currentUser()->hasPermission('administer content')) { ... }"", ""bad"": ""// No permission check""}","[""https://www.drupal.org/docs/security/access-control""]",security|permissions|access,Missing permission checks can expose sensitive functionality,Use permission checks or access control handlers
DS007,drupal_performance,caching,Use Render Caching,Implement proper cache tags and contexts,medium,"{""good"": ""$build['#cache'] = ['tags' => ['node:' . $nid], 'contexts' => ['user']];"", ""bad"": ""// No cache metadata""}","[""https://www.drupal.org/docs/drupal-apis/cache-api""]",performance|caching|render,Proper caching improves site performance significantly,Add cache metadata to all render arrays
DS008,drupal_best_practices,dependency_injection,Use Dependency Injection,Inject services instead of calling static methods,high,"{""good"": ""public function __construct(EntityTypeManagerInterface $entity_type_manager) { ... }"", ""bad"": ""\\Drupal::entityTypeManager()""}","[""https://www.drupal.org/docs/drupal-apis/services-and-dependency-injection""]",services|di|best-practices,Dependency injection improves testability and maintainability,Implement ContainerInjectionInterface or extend ControllerBase
DS009,drupal_security,file_uploads,Validate File Extensions,Restrict allowed file extensions for uploads,high,"{""good"": ""'file_extensions' => 'pdf doc docx'"", ""bad"": ""// No file extension restrictions""}","[""https://www.drupal.org/docs/security/file-security""]",security|files|uploads,Unrestricted file uploads can lead to code execution,Configure file fields with appropriate extension restrictions
DS010,drupal_coding_standards,hooks,Hook Implementation Naming,Follow hook naming conventions,low,"{""good"": ""function mymodule_form_alter(&$form, FormStateInterface $form_state, $form_id) { ... }"", ""bad"": ""function my_module_formAlter(...) { ... }""}","[""https://www.drupal.org/docs/develop/standards/hooks""]",hooks|naming|conventions,Proper hook naming ensures Drupal can discover and invoke them,Use module_name_hook_name pattern
ACC001,drupal_accessibility,acc1,Images must have alt attributes for screen readers,"Images must have alt attributes for screen readers. Use meaningful descriptions that describe the image content or function, not decorative text like 'image' or 'photo'. For decorative images, use empty alt='' to indicate they should be ignored by screen readers.",high,"{""good"": ""<img src=\""logo.png\"" alt=\""Company ABC Logo\"" />"", ""bad"": ""<img src=\""logo.png\"" alt=\""image\"" /><!-- Decorative --><img src=\""decoration.png\"" alt=\""\"" />""}","[""https://www.drupal.org/docs/accessibility""]",accessibility,,
ACC002,drupal_accessibility,acc2,"ARIA attributes should not be empty and must provide meaningful values that describe the element's purpose, state, or properties","ARIA attributes should not be empty and must provide meaningful values that describe the element's purpose, state, or properties. Use aria-label for accessible names, aria-describedby for additional descriptions, and aria-expanded for collapsible elements.",high,"{""good"": ""<button aria-label=\""Close dialog\"" aria-expanded=\""false\"">\u00d7</button>"", ""bad"": ""<button aria-label=\""\"">\u00d7</button>""}","[""https://www.drupal.org/docs/accessibility""]",accessibility,,
ACC003,drupal_accessibility,acc3,Buttons should have meaningful descriptive content that clearly indicates their action or purpose,"Buttons should have meaningful descriptive content that clearly indicates their action or purpose. Avoid generic text like 'Click here', 'Read more', or 'Submit'. Include context about what the button does.",high,"{""good"": ""<button>Save user profile</button><a href=\""/article\"">Read full article about climate change</a>"", ""bad"": ""<button>Click here</button><a href=\""/article\"">Read more</a>""}","[""https://www.drupal.org/docs/accessibility""]",accessibility,,
PHP001,drupal_coding_standards,php1,Add declare(strict_types=1); at the beginning of PHP files after opening <?php tag,Add declare(strict_types=1); at the beginning of PHP files after opening <?php tag for type safety. This enables strict type checking and prevents type coercion errors.,medium,"{""good"": ""<?php\n\ndeclare(strict_types=1);\n\nnamespace Drupal\\mymodule;\n\nclass MyClass {\n  public function calculate(int $number): int {\n    return $number * 2; // Will throw error if $number is not int\n  }\n}"", ""bad"": """"}",[],php,,
PHP002,drupal_coding_standards,php2,Use uppercase,"Use uppercase for TRUE, FALSE, and NULL constants instead of lowercase variants for consistency with Drupal coding standards and better readability.",medium,"{""good"": ""if ($value === TRUE) {\n  return NULL;\n}\n\n$is_valid = FALSE;\n$default_value = NULL;"", ""bad"": ""if ($value === true) {\n  return null;\n}""}",[],drupal|php,,
DRUPAL001,drupal_best_practices,drupal1,"Use hasField(), get(), and value() methods","Use hasField(), get(), and value() methods for entity fields instead of direct property access. This ensures proper field API integration and handles missing fields gracefully.",medium,"{""good"": ""if ($node->hasField('field_custom_data')) {\n  $field_value = $node->get('field_custom_data')->value;\n  $field_items = $node->get('field_custom_data')->getValue();\n  \n  // For entity reference fields\n  $referenced_entities = $node->get('field_references')->referencedEntities();\n}"", ""bad"": ""$field_value = $node->field_custom_data->value; // May cause errors""}",[],drupal|api,,
DRUPAL002,drupal_best_practices,drupal2,Use try/catch,Use try/catch for exception handling with proper logging using \Drupal::logger() service. This ensures errors are properly logged and handled without breaking the application.,medium,"{""good"": ""try {\n  $entity = $this->entityTypeManager\n    ->getStorage('node')\n    ->load($nid);\n    \n  $entity->set('title', $new_title);\n  $entity->save();\n  \n  $this->logger->info('Updated node @nid', ['@nid' => $nid]);\n  \n} catch (\\Exception $e) {\n  $this->logger->error('Failed to update node @nid: @message', [\n    '@nid' => $nid,\n    '@message' => $e->getMessage(),\n  ]);\n}"", ""bad"": """"}",[],drupal,,
SEC001,drupal_security,sec1,Always use parameterized queries with placeholders (:placeholder),Always use parameterized queries with placeholders (:placeholder) to prevent SQL injection attacks. Never concatenate user input directly into SQL queries.,critical,"{""good"": ""$query = $database->select('users', 'u')\n  ->fields('u', ['uid', 'name'])\n  ->condition('mail', $email)\n  ->condition('status', 1);\n\n$database->insert('custom_table')\n  ->fields([\n    'name' => $name,\n    'email' => $email,\n  ])\n  ->execute();"", ""bad"": ""$query = \""SELECT * FROM users WHERE mail = '$email'\"";""}","[""https://www.drupal.org/docs/security-in-drupal""]",security,,
SEC002,drupal_security,sec2,Use Drupal's t() function,"Use Drupal's t() function for user-visible strings with proper placeholder sanitization. Use @variable for escaped output, %variable for emphasized text, and :variable for URLs.",critical,"{""good"": ""$message = $this->t('User @name has @count messages.', [\n  '@name' => $user->getDisplayName(),  // Escaped\n  '@count' => $message_count,          // Escaped\n]);\n\n$error = $this->t('File %filename failed.', [\n  '%filename' => $file->getFilename(),  // Emphasized\n]);"", ""bad"": ""$message = \""User \"" . $user_name . \"" has messages\"";""}","[""https://www.drupal.org/docs/security-in-drupal""]",drupal|security,,
JS001,drupal_javascript,js1,Use Drupal behaviors instead of IIFE (Immediately Invoked Function Expression),Use Drupal behaviors instead of IIFE (Immediately Invoked Function Expression) for proper integration with Drupal's JavaScript framework. Behaviors are re-executed when new content is added via AJAX.,medium,"{""good"": ""(function ($, Drupal) {\n  'use strict';\n  \n  Drupal.behaviors.myModuleBehavior = {\n    attach: function (context, settings) {\n      $('.my-element', context).once('my-module').each(function () {\n        // Your code here\n      });\n    }\n  };\n})(jQuery, Drupal);"", ""bad"": ""(function() {\n  // Code that won't work with AJAX\n})();""}",[],drupal|javascript,,
JS002,drupal_javascript,js2,Cache jQuery selectors in variables for better performance: var $element = $(',Cache jQuery selectors in variables for better performance: var $element = $('.selector'); instead of repeated $('.selector') calls. This reduces DOM queries and improves performance.,medium,"{""good"": ""Drupal.behaviors.myBehavior = {\n  attach: function (context) {\n    var $buttons = $('.my-button', context);\n    var $modal = $('#my-modal');\n    \n    $buttons.once('my-behavior').on('click', function() {\n      $modal.show();\n    });\n  }\n};"", ""bad"": ""$('.my-button').on('click', function() {\n  $('#my-modal').show();\n  $('.my-button').addClass('active');\n});""}","[""https://www.drupal.org/docs/drupal-apis/form-api"", ""https://www.drupal.org/docs/drupal-apis/cache-api""]",forms|performance|caching|javascript,,
FORM001,drupal_forms,form1,Extend FormBase or ConfigFormBase,"Extend FormBase or ConfigFormBase for custom forms with proper validation and submission handling. Implement getFormId(), buildForm(), validateForm(), and submitForm() methods.",medium,"{""good"": ""use Drupal\\Core\\Form\\FormBase;\nuse Drupal\\Core\\Form\\FormStateInterface;\n\nclass MyCustomForm extends FormBase {\n  \n  public function getFormId(): string {\n    return 'mymodule_custom_form';\n  }\n  \n  public function buildForm(array $form, FormStateInterface $form_state): array {\n    $form['name'] = [\n      '#type' => 'textfield',\n      '#title' => $this->t('Name'),\n      '#required' => TRUE,\n    ];\n    \n    $form['submit'] = [\n      '#type' => 'submit',\n      '#value' => $this->t('Submit'),\n    ];\n    \n    return $form;\n  }\n  \n  public function validateForm(array &$form, FormStateInterface $form_state): void {\n    $name = $form_state->getValue('name');\n    if (strlen($name) < 2) {\n      $form_state->setErrorByName('name', $this->t('Name must be at least 2 characters.'));\n    }\n  }\n  \n  public function submitForm(array &$form, FormStateInterface $form_state): void {\n    $this->messenger()->addMessage($this->t('Form submitted successfully.'));\n  }\n}"", ""bad"": """"}","[""https://www.drupal.org/docs/drupal-apis/form-api""]",forms,,
HOOK001,drupal_hooks,hook1,Implement hook_help() to provide module documentation and usage instructions,Implement hook_help() to provide module documentation and usage instructions. This helps users understand how to use your module and appears on the module's help page.,medium,"{""good"": ""/**\n * Implements hook_help().\n */\nfunction mymodule_help(string $route_name, RouteMatchInterface $route_match): string {\n  switch ($route_name) {\n    case 'help.page.mymodule':\n      $output = '<h3>' . t('About') . '</h3>';\n      $output .= '<p>' . t('This module provides custom functionality for...') . '</p>';\n      $output .= '<h3>' . t('Usage') . '</h3>';\n      $output .= '<p>' . t('To use this module:') . '</p>';\n      $output .= '<ul>';\n      $output .= '<li>' . t('Configure settings at <a href=\"":url\"">Configuration page</a>', [':url' => Url::fromRoute('mymodule.settings')->toString()]) . '</li>';\n      $output .= '</ul>';\n      return $output;\n      \n    case 'mymodule.settings':\n      return '<p>' . t('Configure the module settings below.') . '</p>';\n  }\n  \n  return '';\n}"", ""bad"": """"}","[""https://api.drupal.org/api/drupal/core!core.api.php/group/hooks""]",hooks,,
CACHE001,drupal_performance,cache1,Implement cache tags for content-based cache invalidation (#cache['tags']),Implement cache tags for content-based cache invalidation (#cache['tags']). Use entity-specific tags and custom tags to ensure proper cache invalidation when content changes.,medium,"{""good"": ""$build = [\n  '#theme' => 'user_profile',\n  '#user' => $user,\n  '#cache' => [\n    'tags' => [\n      'user:' . $user->id(),\n      'user_list',\n      'mymodule:user_profile',\n    ],\n    'contexts' => ['user', 'url.path'],\n    'max-age' => 3600, // 1 hour\n  ],\n];\n\n// In a service method\npublic function getUserData(int $uid): array {\n  $cid = 'mymodule:user_data:' . $uid;\n  \n  if ($cache = $this->cache->get($cid)) {\n    return $cache->data;\n  }\n  \n  $data = $this->buildUserData($uid);\n  \n  $this->cache->set($cid, $data, Cache::PERMANENT, [\n    'user:' . $uid,\n    'mymodule:user_data',\n  ]);\n  \n  return $data;\n}"", ""bad"": """"}","[""https://www.drupal.org/docs/drupal-apis/cache-api""]",caching,,
ROUTE001,drupal_routing,route1,Define routes in *,"Define routes in *.routing.yml files with proper path patterns and requirements. Use entity parameters, access controls, and proper HTTP methods for RESTful design.",medium,"{""good"": ""# mymodule.routing.yml\nmymodule.admin_config:\n  path: '/admin/config/mymodule'\n  defaults:\n    _form: '\\Drupal\\mymodule\\Form\\ConfigForm'\n    _title: 'My Module Configuration'\n  requirements:\n    _permission: 'administer mymodule'\n\nmymodule.user_data:\n  path: '/user/{user}/mymodule-data'\n  defaults:\n    _controller: '\\Drupal\\mymodule\\Controller\\UserDataController::view'\n    _title: 'User Data'\n  requirements:\n    _custom_access: '\\Drupal\\mymodule\\Access\\UserDataAccess::access'\n  options:\n    parameters:\n      user:\n        type: entity:user\n\nmymodule.api_endpoint:\n  path: '/api/mymodule/data/{id}'\n  defaults:\n    _controller: '\\Drupal\\mymodule\\Controller\\ApiController::getData'\n  requirements:\n    _access: 'TRUE'\n    id: \\d+\n  methods: [GET, POST]"", ""bad"": """"}",[],routing,,
PLUGIN001,drupal_plugins,plugin1,Use proper plugin annotations with all required properties and implement required interfaces,Use proper plugin annotations with all required properties and implement required interfaces. Follow the plugin discovery pattern with proper base classes.,medium,"{""good"": ""/**\n * Provides a custom data processor plugin.\n *\n * @Plugin(\n *   id = \""custom_processor\"",\n *   label = @Translation(\""Custom Data Processor\""),\n *   description = @Translation(\""Processes data using custom logic.\""),\n *   category = @Translation(\""Data Processing\""),\n *   weight = 10\n * )\n */\nclass CustomProcessor extends PluginBase implements DataProcessorInterface, ContainerFactoryPluginInterface {\n  \n  public function __construct(\n    array $configuration,\n    string $plugin_id,\n    mixed $plugin_definition,\n    protected LoggerInterface $logger,\n  ) {\n    parent::__construct($configuration, $plugin_id, $plugin_definition);\n  }\n  \n  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): static {\n    return new static(\n      $configuration,\n      $plugin_id,\n      $plugin_definition,\n      $container->get('logger.factory')->get('mymodule'),\n    );\n  }\n  \n  public function process(array $data): array {\n    // Plugin implementation\n    return $processed_data;\n  }\n}"", ""bad"": """"}",[],,,
TWIG001,drupal_twig,twig1,Use Twig templates instead of theme functions for Drupal 8+ theming,Use Twig templates instead of theme functions for Drupal 8+ theming. Implement proper template suggestions and use Twig filters appropriately.,medium,"{""good"": ""// In mymodule.module\nfunction mymodule_theme(): array {\n  return [\n    'user_profile_card' => [\n      'variables' => [\n        'user' => NULL,\n        'show_email' => FALSE,\n      ],\n      'template' => 'user-profile-card',\n    ],\n  ];\n}\n\n// templates/user-profile-card.html.twig\n<div class=\""user-profile-card\"">\n  <h3>{{ user.getDisplayName() }}</h3>\n  {% if show_email %}\n    <p>{{ user.getEmail() }}</p>\n  {% endif %}\n  <div class=\""user-roles\"">\n    {% for role in user.getRoles() %}\n      <span class=\""role\"">{{ role|t }}</span>\n    {% endfor %}\n  </div>\n</div>\n\n// Usage in code\n$build = [\n  '#theme' => 'user_profile_card',\n  '#user' => $user,\n  '#show_email' => TRUE,\n];"", ""bad"": """"}","[""https://www.drupal.org/docs/theming-drupal/twig-in-drupal""]",drupal|twig,,
CONFIG001,drupal_configuration,config1,Use configuration schemas (config/schema/*,Use configuration schemas (config/schema/*.yml) for all configuration entities. Define proper data types and validation for configuration values.,medium,"{""good"": ""# config/schema/mymodule.schema.yml\nmymodule.settings:\n  type: config_object\n  label: 'My Module settings'\n  mapping:\n    api:\n      type: mapping\n      label: 'API settings'\n      mapping:\n        key:\n          type: string\n          label: 'API Key'\n        timeout:\n          type: integer\n          label: 'Timeout in seconds'\n        enabled:\n          type: boolean\n          label: 'Enable API'\n\n# config/install/mymodule.settings.yml\napi:\n  key: ''\n  timeout: 30\n  enabled: false\n\n// In ConfigFormBase\nprotected function getEditableConfigNames(): array {\n  return ['mymodule.settings'];\n}\n\npublic function buildForm(array $form, FormStateInterface $form_state): array {\n  $config = $this->config('mymodule.settings');\n  \n  $form['api_key'] = [\n    '#type' => 'textfield',\n    '#title' => $this->t('API Key'),\n    '#default_value' => $config->get('api.key'),\n  ];\n  \n  return parent::buildForm($form, $form_state);\n}"", ""bad"": """"}",[],,,
PERF001,drupal_performance,perf1,"Implement proper cache tags, contexts, and max-age","Implement proper cache tags, contexts, and max-age for render arrays and responses. Use entity-specific cache tags and appropriate cache contexts for user-specific content.",medium,"{""good"": ""$build = [\n  '#theme' => 'product_list',\n  '#products' => $products,\n  '#cache' => [\n    'tags' => [\n      'product_list',\n      'config:mymodule.settings',\n    ] + array_map(fn($p) => 'product:' . $p->id(), $products),\n    'contexts' => [\n      'user.roles',\n      'url.query_args:page',\n      'url.query_args:sort',\n    ],\n    'max-age' => 3600, // 1 hour\n  ],\n];\n\n// In controller\npublic function productList(): array {\n  $products = $this->getProducts();\n  \n  $response = [\n    '#theme' => 'product_list',\n    '#products' => $products,\n  ];\n  \n  // Add cache metadata\n  $cache_metadata = new CacheableMetadata();\n  $cache_metadata->addCacheTags(['product_list']);\n  $cache_metadata->addCacheContexts(['user.roles']);\n  $cache_metadata->setCacheMaxAge(3600);\n  \n  foreach ($products as $product) {\n    $cache_metadata->addCacheTags(['product:' . $product->id()]);\n  }\n  \n  $cache_metadata->applyTo($response);\n  \n  return $response;\n}"", ""bad"": """"}","[""https://www.drupal.org/docs/drupal-apis/cache-api""]",performance|caching,,
TEST001,drupal_testing,test1,Write unit tests for Drupal modules and backend logic using PHPUnit framework,"Write unit tests for Drupal modules and backend logic using PHPUnit framework. Test business logic, services, and utility functions with proper mocking.",medium,"{""good"": ""// tests/src/Unit/Service/DataProcessorTest.php\nnamespace Drupal\\Tests\\mymodule\\Unit\\Service;\n\nuse Drupal\\Tests\\UnitTestCase;\nuse Drupal\\mymodule\\Service\\DataProcessor;\nuse Drupal\\Core\\Logger\\LoggerChannelInterface;\n\nclass DataProcessorTest extends UnitTestCase {\n  \n  protected DataProcessor $dataProcessor;\n  protected LoggerChannelInterface $logger;\n  \n  protected function setUp(): void {\n    parent::setUp();\n    \n    $this->logger = $this->createMock(LoggerChannelInterface::class);\n    $this->dataProcessor = new DataProcessor($this->logger);\n  }\n  \n  public function testProcessValidData(): void {\n    $input = ['name' => 'John', 'age' => 30];\n    $expected = ['name' => 'JOHN', 'age' => 30, 'processed' => TRUE];\n    \n    $result = $this->dataProcessor->process($input);\n    \n    $this->assertEquals($expected, $result);\n  }\n  \n  public function testProcessInvalidDataThrowsException(): void {\n    $this->expectException(\\InvalidArgumentException::class);\n    $this->expectExceptionMessage('Name is required');\n    \n    $this->dataProcessor->process(['age' => 30]);\n  }\n  \n  public function testProcessLogsErrors(): void {\n    $this->logger->expects($this->once())\n      ->method('error')\n      ->with('Processing failed: @message', ['@message' => 'Name is required']);\n    \n    try {\n      $this->dataProcessor->process([]);\n    } catch (\\Exception $e) {\n      // Expected exception\n    }\n  }\n}"", ""bad"": """"}",[],drupal|testing|php,,
API001,drupal_api,api1,Use standard HTTP methods (GET,"Use standard HTTP methods (GET for retrieval, POST for creation, PUT for complete updates, DELETE for removal, PATCH for partial updates) for API endpoints. Follow RESTful conventions for predictable API behavior.",medium,"{""good"": ""// mymodule.routing.yml\nmymodule.api.users:\n  path: '/api/users'\n  defaults:\n    _controller: '\\Drupal\\mymodule\\Controller\\ApiController::getUsers'\n  requirements:\n    _permission: 'access api'\n  methods: [GET]\n\nmymodule.api.user_create:\n  path: '/api/users'\n  defaults:\n    _controller: '\\Drupal\\mymodule\\Controller\\ApiController::createUser'\n  requirements:\n    _permission: 'create users via api'\n  methods: [POST]\n\nmymodule.api.user_update:\n  path: '/api/users/{id}'\n  defaults:\n    _controller: '\\Drupal\\mymodule\\Controller\\ApiController::updateUser'\n  requirements:\n    _permission: 'update users via api'\n    id: \\d+\n  methods: [PUT, PATCH]\n\nmymodule.api.user_delete:\n  path: '/api/users/{id}'\n  defaults:\n    _controller: '\\Drupal\\mymodule\\Controller\\ApiController::deleteUser'\n  requirements:\n    _permission: 'delete users via api'\n    id: \\d+\n  methods: [DELETE]"", ""bad"": """"}",[],api,,
