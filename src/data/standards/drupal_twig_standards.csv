id,category,subcategory,title,description,severity,examples,references,tags,rationale,fix_guidance
DS_TWIG_001,drupal_twig,documentation,Include file-level docblock,"Every Twig template must include a file-level docblock wrapped in Twig comment markers {# #} that documents available variables.",high,"{""good"": ""{#\n/**\n * @file\n * Theme override for a user profile page.\n *\n * Available variables:\n * - user: The user entity.\n * - content: A list of content items.\n */\n#}"", ""bad"": ""<div class=\""profile\"">\n  {{ content }}\n</div>""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['documentation', 'docblock', 'variables']",Proper documentation helps developers understand what variables are available and how to use the template.,Add a file-level docblock at the top of every Twig template documenting available variables.
DS_TWIG_002,drupal_twig,documentation,Document variables by name only,"In docblocks, document available variables by name without specifying their types.",medium,"{""good"": ""Available variables:\n- user: The user entity.\n- content: A list of content items.\n- attributes: HTML attributes."", ""bad"": ""Available variables:\n- user (object): The user entity.\n- content (array): A list of content items.\n- attributes (Attribute): HTML attributes.""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['documentation', 'variables', 'types']",Twig is a template language where variable types are less relevant than their purpose and structure.,Document variables by name and purpose without including specific PHP types.
DS_TWIG_003,drupal_twig,documentation,Reference inline variables with single quotes,"When referencing variables within documentation, wrap them in single quotes.",low,"{""good"": ""Reference the 'user' variable for user information."", ""bad"": ""Reference the user variable for user information.""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['documentation', 'variables', 'formatting']",Consistent formatting makes documentation more readable and helps distinguish variables from regular text.,Wrap variable names in single quotes when referencing them in comments or documentation.
DS_TWIG_004,drupal_twig,syntax,Use proper variable existence checking,"Use `{% if foo %}` to check if a variable exists and has a truthy value.",critical,"{""good"": ""{% if user.name %}\n  <h1>{{ user.name }}</h1>\n{% endif %}"", ""bad"": ""{% if user.name is defined %}\n  <h1>{{ user.name }}</h1>\n{% endif %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['syntax', 'conditionals', 'variables']",Simple existence checks are cleaner and handle both undefined variables and empty values appropriately.,Use `{% if variable %}` instead of `{% if variable is defined %}` for most cases.
DS_TWIG_005,drupal_twig,syntax,Use for loops for iteration,"Use `{% for %}` loops to iterate over collections of data.",medium,"{""good"": ""{% for item in items %}\n  <div>{{ item.title }}</div>\n{% endfor %}"", ""bad"": ""{% set i = 0 %}\n{% for item in items %}\n  {% set i = i + 1 %}\n  <div>Item {{ i }}: {{ item.title }}</div>\n{% endfor %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['syntax', 'loops', 'iteration']",For loops are the idiomatic way to iterate in Twig and provide built-in loop variables.,Use for loops with proper Twig syntax instead of manual counter variables.
DS_TWIG_006,drupal_twig,syntax,Use set tag for variable assignment,"Use `{% set variable = value %}` to create or modify variables within templates.",medium,"{""good"": ""{% set classes = [\n  'my-class',\n  'another-class'\n] %}"", ""bad"": ""{% do classes.push('my-class') %}\n{% do classes.push('another-class') %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['syntax', 'variables', 'assignment']",The set tag is the standard Twig way to create and modify variables within templates.,Use the set tag for all variable assignments and modifications.
DS_TWIG_007,drupal_twig,attributes,Print all attributes using attributes variable,"Always print all attributes using `{{ attributes }}` to ensure all HTML attributes are included.",critical,"{""good"": ""<div{{ attributes.addClass('my-class') }}>\n  {{ content }}\n</div>"", ""bad"": ""<div class=\""{{ attributes.class }} my-class\"" id=\""{{ attributes.id }}\"">\n  {{ content }}\n</div>""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['attributes', 'html', 'accessibility']",Using the attributes variable ensures all necessary HTML attributes including accessibility and data attributes are preserved.,Always use the attributes variable rather than manually printing individual attributes.
DS_TWIG_008,drupal_twig,attributes,Print class attributes separately in core,"In Drupal core templates, print class attributes separately from other attributes.",medium,"{""good"": ""<div class=\""{{ attributes.class }}\"" {{ attributes }}>\n  {{ content }}\n</div>"", ""bad"": ""<div{{ attributes }}>\n  {{ content }}\n</div>""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['attributes', 'core', 'classes']",Drupal core follows a specific pattern for attribute handling that maintains consistency across core templates.,Follow the core pattern of printing class attributes separately when working on core templates.
DS_TWIG_009,drupal_twig,formatting,Use spaceless filter for whitespace control,"Prefer `{% apply spaceless %}` over dash (-) whitespace modifiers for removing unwanted whitespace.",medium,"{""good"": ""{% apply spaceless %}\n  <div>\n    <span>{{ content }}</span>\n  </div>\n{% endapply %}"", ""bad"": ""<div>\n  <span>{{- content -}}</span>\n</div>""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['formatting', 'whitespace', 'filters']",The spaceless filter provides more predictable whitespace control and is easier to read than inline modifiers.,Use the spaceless filter to wrap blocks of code that need whitespace removed.
DS_TWIG_010,drupal_twig,formatting,Minimize dash whitespace modifiers,"Use dash (-) whitespace modifiers sparingly and only when spaceless filter is not appropriate.",low,"{""good"": ""{{ variable }}"", ""bad"": ""{{- variable -}}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['formatting', 'whitespace', 'modifiers']",Excessive use of whitespace modifiers can make templates harder to read and maintain.,Only use dash modifiers when you need fine-grained whitespace control that spaceless cannot provide.
DS_TWIG_011,drupal_twig,formatting,Remove unnecessary spaces around attributes,"Remove unnecessary spaces around attribute declarations to keep markup clean.",medium,"{""good"": ""<div{{ attributes }}>"", ""bad"": ""<div {{ attributes }} >""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['formatting', 'attributes', 'spacing']",Clean spacing around attributes improves readability and prevents rendering issues.,Remove extra spaces around attribute variables in HTML tags.
DS_TWIG_012,drupal_twig,syntax,Use pipe character for filters,"Use the pipe character `|` for applying filters with no spaces around it.",critical,"{""good"": ""{{ 'Original'|t }}\n{{ content|raw }}"", ""bad"": ""{{ 'Original' | t }}\n{{ content | raw }}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['syntax', 'filters', 'formatting']",Consistent filter syntax improves readability and follows Twig conventions.,Remove spaces around pipe characters when applying filters.
DS_TWIG_013,drupal_twig,comments,Use Twig comment markers,"Use `{# #}` for all comments within Twig templates.",medium,"{""good"": ""{# This is a comment #}\n{#\n  This is a multi-line\n  comment block\n#}"", ""bad"": ""<!-- This is an HTML comment -->\n// This is not valid in Twig""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['comments', 'syntax', 'documentation']",Twig comments are processed by the template engine and won't appear in rendered HTML.,Use Twig comment syntax instead of HTML comments for template-specific notes.
DS_TWIG_014,drupal_twig,comments,Single-line comments on same line,"Place single-line comments on the same line as the code they describe when appropriate.",low,"{""good"": ""{{ user.name }} {# Display the user name #}"", ""bad"": ""{# Display the user name #}\n{{ user.name }}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['comments', 'formatting', 'readability']",Inline comments for simple statements reduce visual clutter while maintaining clarity.,Place brief explanatory comments inline when they refer to a single line of code.
DS_TWIG_015,drupal_twig,comments,Multi-line comments on separate lines,"Place multi-line comments on separate lines before the code they describe.",medium,"{""good"": ""{#\n  Complex logic explanation\n  that spans multiple lines\n#}\n{% if complex_condition %}"", ""bad"": ""{% if complex_condition %} {# Complex logic explanation that spans multiple lines and makes the line too long #}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['comments', 'formatting', 'readability']",Multi-line comments should be separate from code to maintain readability and line length limits.,Place longer comments on separate lines above the code they describe.
DS_TWIG_016,drupal_twig,comments,Keep comments under 80 characters,"Limit comment lines to 80 characters or less for better readability.",low,"{""good"": ""{# Short descriptive comment about the following code #}"", ""bad"": ""{# This is a very long comment that exceeds the 80 character limit and becomes harder to read #}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['comments', 'formatting', 'line-length']",Shorter comment lines are easier to read and work better with various editor configurations.,Break long comments into multiple lines to stay within the 80 character limit.
DS_TWIG_017,drupal_twig,best_practices,Prioritize readability,"Write Twig templates that prioritize readability over brevity.",high,"{""good"": ""{% if user.isAuthenticated %}\n  <div class=\""welcome\"">\n    <h2>{{ 'Welcome back, @name!'|t({'@name': user.name}) }}</h2>\n  </div>\n{% endif %}"", ""bad"": ""{{ user.isAuthenticated ? '<div class=\""welcome\""><h2>' ~ ('Welcome back, @name!'|t({'@name': user.name})) ~ '</h2></div>' : '' }}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['best_practices', 'readability', 'maintainability']",Readable templates are easier to maintain and debug than overly condensed code.,Choose clear and descriptive code structure over compact but unclear expressions.
DS_TWIG_018,drupal_twig,best_practices,Follow Symfony Twig documentation,"Follow the official Symfony Twig documentation for standard Twig practices.",medium,"{""good"": ""{% for item in items if item.published %}\n  {{ item.title }}\n{% endfor %}"", ""bad"": ""{% for item in items %}\n  {% if item.published %}\n    {{ item.title }}\n  {% endif %}\n{% endfor %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards', 'https://twig.symfony.com/doc/']","['best_practices', 'symfony', 'standards']",Following Symfony documentation ensures compatibility and leverages Twig's full capabilities.,Refer to official Twig documentation for best practices and advanced features.
DS_TWIG_019,drupal_twig,best_practices,Maintain consistency with Drupal core,"Follow the patterns and conventions used in Drupal core Twig templates.",high,"{""good"": ""Following core patterns for node.html.twig:\n<article{{ attributes.addClass(classes) }}>\n  {{ title_prefix }}\n  {{ title_suffix }}\n  <div{{ content_attributes.addClass('content') }}>\n    {{ content }}\n  </div>\n</article>"", ""bad"": ""Custom patterns that don't match core:\n<div class=\""node {{ node.bundle }}\"">\n  <h1>{{ node.title }}</h1>\n  {{ node.body }}\n</div>""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['best_practices', 'consistency', 'core']",Consistency with core templates ensures predictable behavior and easier maintenance.,Study and follow the patterns used in similar core templates when creating custom templates.
DS_TWIG_020,drupal_twig,security,Escape output appropriately,"Ensure proper escaping of variables to prevent XSS attacks.",critical,"{""good"": ""{{ user.name }}\n{{ content|raw }}"", ""bad"": ""{{ user.name|raw }}\n{{ user_input_content }}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['security', 'xss', 'escaping']",Proper output escaping prevents cross-site scripting attacks and maintains site security.,Only use the raw filter when you're certain the content is safe and pre-processed.
DS_TWIG_021,drupal_twig,performance,Avoid complex logic in templates,"Keep complex business logic out of Twig templates and in preprocessing functions.",medium,"{""good"": ""{# In preprocessing: #}\n{# $variables['formatted_date'] = $date_formatter->format($timestamp, 'custom', 'Y-m-d'); #}\n{{ formatted_date }}"", ""bad"": ""{{ date(timestamp, 'Y-m-d') }}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['performance', 'logic', 'separation']",Keeping logic in preprocessing improves performance and maintains separation of concerns.,Move complex calculations and formatting logic to preprocess functions.
DS_TWIG_022,drupal_twig,naming,Use descriptive variable names,"Use clear and descriptive names for variables created with the set tag.",medium,"{""good"": ""{% set sidebar_classes = [\n  'sidebar',\n  'sidebar--' ~ region,\n  sidebar_has_content ? 'sidebar--has-content'\n] %}"", ""bad"": ""{% set c = [\n  'sidebar',\n  'sidebar--' ~ region,\n  x ? 'sidebar--has-content'\n] %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['naming', 'variables', 'readability']",Descriptive variable names make templates self-documenting and easier to understand.,Choose variable names that clearly indicate their purpose and content.
DS_TWIG_023,drupal_twig,formatting,Proper indentation for nested structures,"Use consistent 2-space indentation for nested Twig structures.",medium,"{""good"": ""{% if condition %}\n  {% for item in items %}\n    <div>\n      {{ item.content }}\n    </div>\n  {% endfor %}\n{% endif %}"", ""bad"": ""{% if condition %}\n{% for item in items %}\n<div>\n{{ item.content }}\n</div>\n{% endfor %}\n{% endif %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['formatting', 'indentation', 'structure']",Consistent indentation improves template readability and shows logical structure clearly.,Maintain 2-space indentation for all nested Twig tags and HTML elements.
DS_TWIG_024,drupal_twig,syntax,Use appropriate comparison operators,"Use proper Twig comparison operators for conditionals.",medium,"{""good"": ""{% if user.roles contains 'administrator' %}\n{% if items|length > 0 %}\n{% if status == 'published' %}"", ""bad"": ""{% if 'administrator' in user.roles %}\n{% if count(items) > 0 %}\n{% if status is same as 'published' %}""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['syntax', 'operators', 'conditionals']",Using appropriate Twig operators ensures code clarity and takes advantage of Twig's built-in functionality.,Learn and use Twig-specific operators like 'contains' and filters like 'length'.
DS_TWIG_025,drupal_twig,structure,Organize template sections logically,"Structure templates with logical sections: variables/setup, main content, then cleanup.",medium,"{""good"": ""{# Variable setup #}\n{% set classes = ['page', 'page--' ~ page_type] %}\n\n{# Main content #}\n<div{{ attributes.addClass(classes) }}>\n  {{ content }}\n</div>\n\n{# Additional processing if needed #}"", ""bad"": ""<div{{ attributes.addClass(['page', 'page--' ~ page_type]) }}>\n  {% set extra_var = some_value %}\n  {{ content }}\n  {% set another_var = other_value %}\n</div>""}","['https://www.drupal.org/docs/develop/coding-standards/twig-coding-standards']","['structure', 'organization', 'readability']",Logical organization makes templates easier to understand and maintain.,Group variable setup at the top and keep the main template logic clean and organized.