id,category,subcategory,title,description,severity,examples,references,tags,rationale,fix_guidance
DS_SQL_001,drupal_sql,syntax,Use uppercase for SQL reserved words,"All SQL reserved words (SELECT, FROM, WHERE, etc.) must be written in uppercase for consistency and readability.",medium,"{""good"": ""SELECT nid FROM {node} WHERE status = 1"", ""bad"": ""select nid from {node} where status = 1""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""syntax"", ""formatting"", ""consistency""]","Uppercase reserved words improve code readability and maintain consistency with SQL standards","Convert all SQL reserved words to uppercase"
DS_SQL_002,drupal_sql,syntax,Use lowercase for column and constraint names,"Column names and constraint names should be written in lowercase to follow Drupal conventions.",medium,"{""good"": ""SELECT nid, title FROM {node}"", ""bad"": ""SELECT NID, TITLE FROM {NODE}""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""naming"", ""columns"", ""constraints""]","Lowercase column names follow Drupal's consistent naming convention","Use lowercase for all column and constraint names"
DS_SQL_003,drupal_sql_naming,table_names,Use curly brackets for table names,"All table names in queries must be enclosed in curly brackets {} to enable proper table prefixing.",critical,"{""good"": ""SELECT * FROM {users}"", ""bad"": ""SELECT * FROM users""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""tables"", ""prefixing"", ""portability""]","Curly brackets enable Drupal's table prefixing system and ensure database portability","Wrap all table names with curly brackets {table_name}"
DS_SQL_004,drupal_sql_naming,table_names,Use singular nouns for table names,"Table names should use singular nouns rather than plural forms.",medium,"{""good"": ""{user}"", ""bad"": ""{users}""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""naming"", ""tables"", ""conventions""]","Singular table names provide consistency and clarity in database schema","Use singular noun forms for table names"
DS_SQL_005,drupal_sql_naming,table_names,Prefix table names with module name,"Custom table names should be prefixed with the module name to prevent namespace conflicts.",high,"{""good"": ""{mymodule_custom_data}"", ""bad"": ""{custom_data}""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""naming"", ""modules"", ""namespace""]","Module prefixes prevent table name conflicts between different modules","Add module name prefix to all custom table names"
DS_SQL_006,drupal_sql_naming,constraints,Name constraints explicitly,"Database constraints should have explicit, descriptive names following consistent patterns.",medium,"{""good"": ""CONSTRAINT users_name_unique UNIQUE (name)"", ""bad"": ""CONSTRAINT UNIQUE (name)""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""constraints"", ""naming"", ""maintenance""]","Explicit constraint names make database maintenance and debugging easier","Provide descriptive names for all database constraints"
DS_SQL_007,drupal_sql_naming,indexes,Index names should begin with table name,"Index names must start with the table name followed by descriptive suffix.",medium,"{""good"": ""users_sid_idx"", ""bad"": ""sid_idx""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""indexes"", ""naming"", ""organization""]","Table-prefixed index names provide clear organization and prevent conflicts","Start index names with table name followed by descriptive suffix"
DS_SQL_008,drupal_sql_reserved_words,avoidance,Avoid using SQL reserved words as identifiers,"Do not use SQL reserved words as table names, column names, or other database identifiers.",high,"{""good"": ""user_order_date"", ""bad"": ""order""}","[""https://www.drupal.org/docs/develop/coding-standards/list-of-sql-reserved-words""]","[""sql"", ""reserved-words"", ""identifiers"", ""compatibility""]","Reserved words can cause syntax errors and database compatibility issues","Use descriptive non-reserved words for all database identifiers"
DS_SQL_009,drupal_sql_reserved_words,escaping,Properly escape reserved words when necessary,"If reserved words must be used as identifiers, use appropriate escaping mechanisms for the database system.",medium,"{""good"": ""SELECT `order` FROM {table}"", ""bad"": ""SELECT order FROM {table}""}","[""https://www.drupal.org/docs/develop/coding-standards/list-of-sql-reserved-words""]","[""sql"", ""reserved-words"", ""escaping"", ""syntax""]","Proper escaping prevents SQL syntax errors when reserved words are unavoidable","Use backticks, square brackets, or double quotes to escape reserved words"
DS_SQL_010,drupal_sql_reserved_words,awareness,Be aware of database-specific reserved words,"Different database systems (MySQL, PostgreSQL, etc.) may have different reserved word lists.",medium,"{""good"": ""Check database-specific documentation"", ""bad"": ""Assume all databases have same reserved words""}","[""https://www.drupal.org/docs/develop/coding-standards/list-of-sql-reserved-words""]","[""sql"", ""reserved-words"", ""database-specific"", ""portability""]","Database systems have varying reserved word lists that can cause portability issues","Consult database-specific documentation for complete reserved word lists"
DS_SQL_011,drupal_sql_queries,select_statements,Avoid SELECT * in queries,"Explicitly list required columns instead of using SELECT * for better performance and security.",high,"{""good"": ""SELECT nid, title, created FROM {node}"", ""bad"": ""SELECT * FROM {node}""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""performance"", ""security"", ""select""]","SELECT * can bypass security systems and reduces query performance and clarity","Explicitly specify required columns in SELECT statements"
DS_SQL_012,drupal_sql_queries,node_access,SELECT * can bypass Node Access system,"Using SELECT * in node queries may expose private content by bypassing Drupal's Node Access system.",critical,"{""good"": ""SELECT nid, title FROM {node} WHERE status = 1"", ""bad"": ""SELECT * FROM {node}""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""security"", ""node-access"", ""privacy""]","Node Access system may be bypassed with SELECT *, potentially exposing private content","Use explicit column lists and proper access checking in node queries"
DS_SQL_013,drupal_sql_security,parameterization,Use parameterized queries,"Always use parameterized queries with placeholders (%d, %s, %f, %b) to prevent SQL injection.",critical,"{""good"": ""db_query('SELECT * FROM {users} WHERE uid = %d', $uid)"", ""bad"": ""db_query('SELECT * FROM {users} WHERE uid = ' . $uid)""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""security"", ""injection"", ""parameters""]","Parameterized queries prevent SQL injection attacks","Use database API placeholders for all user-supplied variables"
DS_SQL_014,drupal_sql_security,string_literals,Use single quotes for string literals,"String literals in SQL queries must be enclosed in single quotes, never double quotes.",medium,"{""good"": ""WHERE title = 'My Title'"", ""bad"": ""WHERE title = \""My Title\""""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""syntax"", ""strings"", ""standards""]","Single quotes are the SQL standard for string literals and ensure database compatibility","Replace double quotes with single quotes around string literals"
DS_SQL_015,drupal_sql_security,variable_separation,Move user variables out of query body,"User-supplied variables should be separated from the query string using placeholders.",critical,"{""good"": ""db_query('SELECT * FROM {node} WHERE nid = %d', $nid)"", ""bad"": ""db_query('SELECT * FROM {node} WHERE nid = ' . $nid)""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""security"", ""variables"", ""injection""]","Separating variables prevents SQL injection and improves query caching","Use placeholder parameters instead of string concatenation for variables"
DS_SQL_016,drupal_sql_placeholders,integers,Use %d placeholder for integers,"Integer values must use the %d placeholder in parameterized queries.",high,"{""good"": ""WHERE uid = %d"", ""bad"": ""WHERE uid = %s""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""placeholders"", ""integers"", ""types""]","Correct placeholder types ensure proper data validation and formatting","Use %d placeholder for all integer values in queries"
DS_SQL_017,drupal_sql_placeholders,floats,Use %f placeholder for floating-point numbers,"Floating-point values must use the %f placeholder in parameterized queries.",high,"{""good"": ""WHERE price = %f"", ""bad"": ""WHERE price = %d""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""placeholders"", ""floats"", ""types""]","Correct placeholder types ensure proper data validation and formatting","Use %f placeholder for all floating-point values in queries"
DS_SQL_018,drupal_sql_placeholders,strings,Use %s placeholder for strings,"String values must use the %s placeholder and be enclosed in single quotes in parameterized queries.",high,"{""good"": ""WHERE title = '%s'"", ""bad"": ""WHERE title = %s""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""placeholders"", ""strings"", ""quotes""]","String placeholders must be quoted to form valid SQL syntax","Use '%s' (quoted) placeholder for all string values in queries"
DS_SQL_019,drupal_sql_placeholders,binary,Use %b placeholder for binary data,"Binary data values must use the %b placeholder in parameterized queries.",medium,"{""good"": ""WHERE data = %b"", ""bad"": ""WHERE data = '%s'""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""placeholders"", ""binary"", ""data""]","Binary placeholder ensures proper handling of binary data without corruption","Use %b placeholder for all binary data values in queries"
DS_SQL_020,drupal_sql_placeholders,literal_percent,Use %% for literal percent signs,"Literal percent signs in query strings must be escaped as %% to avoid placeholder confusion.",medium,"{""good"": ""WHERE title LIKE '%%pattern%%'"", ""bad"": ""WHERE title LIKE '%pattern%'""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""placeholders"", ""escaping"", ""literals""]","Double percent signs prevent confusion with placeholder syntax","Escape literal % characters as %% in query strings"
DS_SQL_021,drupal_sql_performance,explicit_columns,Specify exact columns for performance,"Only select the columns actually needed by the application to improve query performance.",medium,"{""good"": ""SELECT nid, title FROM {node}"", ""bad"": ""SELECT * FROM {node}""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""performance"", ""optimization"", ""columns""]","Selecting specific columns reduces memory usage and network transfer","List only the columns required by your application logic"
DS_SQL_022,drupal_sql_performance,self_documenting,Write self-documenting queries,"Explicit column selection makes queries more self-documenting and maintainable.",low,"{""good"": ""SELECT user_id, username, email FROM {users}"", ""bad"": ""SELECT * FROM {users}""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""maintainability"", ""documentation"", ""clarity""]","Explicit columns clearly show what data the query intends to retrieve","Replace SELECT * with explicit column names to improve code clarity"
DS_SQL_023,drupal_sql_configuration,ansi_mode,Enable ANSI SQL compliance,"Database servers should be configured for standard SQL compliance, including ANSI mode for MySQL.",medium,"{""good"": ""SET sql_mode = 'ANSI'"", ""bad"": ""Default MySQL configuration""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""configuration"", ""ansi"", ""compliance""]","ANSI compliance ensures portable SQL that works across different database systems","Configure database server with ANSI and strict modes enabled"
DS_SQL_024,drupal_sql_configuration,strict_mode,Enable strict SQL mode,"Database servers should use strict mode to catch errors and enforce data integrity.",medium,"{""good"": ""SET sql_mode = 'STRICT_TRANS_TABLES'"", ""bad"": ""Permissive SQL mode""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""configuration"", ""strict-mode"", ""integrity""]","Strict mode prevents data corruption and catches SQL errors early","Enable strict SQL mode in database server configuration"
DS_SQL_025,drupal_sql_api,schema_api,Use Schema API for table definitions,"Table definitions should use Drupal's Schema API for cross-database compatibility.",high,"{""good"": ""hook_schema() implementation"", ""bad"": ""Raw CREATE TABLE statements""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""schema-api"", ""portability"", ""drupal""]","Schema API ensures table definitions work across different database systems","Define tables using Drupal's Schema API in hook_schema()"
DS_SQL_026,drupal_sql_api,database_abstraction,Use database abstraction functions,"Use Drupal's database abstraction layer instead of raw SQL when possible.",high,"{""good"": ""db_query(), db_select()"", ""bad"": ""mysql_query(), direct SQL""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""abstraction"", ""portability"", ""api""]","Database abstraction ensures code works with different database systems","Use Drupal's database API functions instead of database-specific functions"
DS_SQL_027,drupal_sql_queries,dynamic_fields,Avoid dynamic table fields,"Dynamic table field selection is generally discouraged except in rare specific cases.",high,"{""good"": ""SELECT nid, title, status FROM {node}"", ""bad"": ""SELECT * FROM {node} -- for dynamic fields""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""dynamic"", ""fields"", ""maintenance""]","Dynamic field selection makes code harder to maintain and debug","Use explicit column lists even when dealing with variable table structures"
DS_SQL_028,drupal_sql_queries,long_field_lists,Handle extremely long field lists appropriately,"Only use SELECT * when dealing with extremely long field lists as a last resort.",low,"{""good"": ""Explicit long column list when practical"", ""bad"": ""SELECT * as convenience shortcut""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""fields"", ""maintenance"", ""exceptions""]","Very long field lists may justify SELECT * usage but should be documented","Document the reason when using SELECT * for long field lists"
DS_SQL_029,drupal_sql_security,node_list_queries,Avoid SELECT * in node list queries,"Queries that generate lists of nodes must never use SELECT * syntax for security reasons.",critical,"{""good"": ""SELECT nid, title, status FROM {node} WHERE status = 1"", ""bad"": ""SELECT * FROM {node} WHERE status = 1""}","[""https://www.drupal.org/docs/develop/coding-standards/avoid-select-from""]","[""sql"", ""nodes"", ""security"", ""lists""]","Node list queries with SELECT * can expose private content through access bypass","Always use explicit column selection in queries that list nodes"
DS_SQL_030,drupal_sql_naming,identifiers,Use square brackets for identifier escaping,"When escaping identifiers other than table names, use square brackets [identifier].",medium,"{""good"": ""SELECT [column name] FROM {table}"", ""bad"": ""SELECT 'column name' FROM {table}""}","[""https://www.drupal.org/docs/develop/standards/sql/sql-coding-conventions""]","[""sql"", ""identifiers"", ""escaping"", ""syntax""]","Square brackets provide consistent identifier escaping across database systems","Use square brackets [name] for escaping column names and other identifiers"