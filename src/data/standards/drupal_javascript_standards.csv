id,category,subcategory,title,description,severity,examples,references,tags,rationale,fix_guidance
DS_JS_001,drupal_javascript,code_formatting,Use 2 spaces for indentation,"All JavaScript code must use 2 space characters for indentation, not tabs or other spacing.",critical,"{""good"": ""function myFunction() {\n  var x = 1;\n  if (x) {\n    console.log('indented with 2 spaces');\n  }\n}"", ""bad"": ""function myFunction() {\n    var x = 1;\n        if (x) {\n        console.log('inconsistent indentation');\n    }\n}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['formatting', 'indentation', 'style']",Consistent indentation improves code readability and maintainability across the project.,Configure your editor to use 2 spaces for indentation and enable visible whitespace to identify inconsistencies.
DS_JS_002,drupal_javascript,code_formatting,No trailing whitespace,"Remove all trailing whitespace characters from the end of lines.",medium,"{""good"": ""var message = 'hello world';\n// No spaces after semicolon"", ""bad"": ""var message = 'hello world';   \n// Three spaces after semicolon""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['formatting', 'whitespace', 'style']",Trailing whitespace can cause issues with version control and creates unnecessary diff noise.,Use an editor plugin or linter to automatically remove trailing whitespace on save.
DS_JS_003,drupal_javascript,code_formatting,Use trailing commas in multi-line arrays,"Add trailing commas in multi-line array and object definitions.",medium,"{""good"": ""var items = [\n  'first',\n  'second',\n  'third',\n];"", ""bad"": ""var items = [\n  'first',\n  'second',\n  'third'\n];""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['formatting', 'arrays', 'style']",Trailing commas make it easier to add new items and create cleaner version control diffs.,Add trailing commas to the last item in multi-line arrays and objects.
DS_JS_004,drupal_javascript,syntax,Mandatory semicolons,"Use semicolons to terminate most statements.",critical,"{""good"": ""var x = 1;\nreturn x;"", ""bad"": ""var x = 1\nreturn x""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['syntax', 'semicolons', 'statements']",Semicolons prevent automatic semicolon insertion issues and make code intentions explicit.,Add semicolons at the end of statements. Use ESLint to catch missing semicolons.
DS_JS_005,drupal_javascript,structure,Wrap file in closure,"Wrap the entire JavaScript file in a closure to avoid global namespace pollution.",critical,"{""good"": ""(function ($, Drupal) {\n  'use strict';\n  // Your code here\n})(jQuery, Drupal);"", ""bad"": ""// Global scope code\nvar myVariable = 'exposed globally';\nfunction myFunction() {}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['structure', 'closure', 'globals']",Prevents global namespace pollution and variable conflicts between modules.,Wrap all module JavaScript in an immediately invoked function expression (IIFE).
DS_JS_006,drupal_javascript,structure,Use strict mode,"Include 'use strict'; directive at the beginning of JavaScript files.",high,"{""good"": ""(function () {\n  'use strict';\n  // Your code here\n})();"", ""bad"": ""(function () {\n  // Missing strict mode\n  // Your code here\n})();""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['structure', 'strict', 'best-practices']",Strict mode helps catch common JavaScript errors and prevents the use of problematic language features.,Add 'use strict'; as the first line inside your function closure.
DS_JS_007,drupal_javascript,naming,Use lowerCamelCase for variables and functions,"Variable names and function names should use lowerCamelCase convention.",medium,"{""good"": ""var userName = 'john';\nfunction getUserName() {}"", ""bad"": ""var user_name = 'john';\nfunction get_user_name() {}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['naming', 'conventions', 'camelcase']",Consistent naming conventions improve code readability and maintainability.,Use lowerCamelCase for all variable and function names. Configure ESLint to enforce this rule.
DS_JS_008,drupal_javascript,jquery,Prefix jQuery variables with dollar sign,"Variables that reference jQuery objects should be prefixed with a dollar sign ($).",medium,"{""good"": ""var $element = $('.my-class');\nvar $body = $('body');"", ""bad"": ""var element = $('.my-class');\nvar body = $('body');""}","['https://www.drupal.org/docs/develop/standards/javascript', 'https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['jquery', 'naming', 'conventions']",Makes it clear when a variable contains a jQuery object versus a plain DOM element.,Prefix all variables containing jQuery objects with $ to distinguish them from regular variables.
DS_JS_009,drupal_javascript,naming,Use UPPER_UNDERSCORED for constants,"Constants should use UPPER_UNDERSCORED naming convention.",medium,"{""good"": ""var MAX_ITEMS = 10;\nvar API_ENDPOINT = '/api/data';"", ""bad"": ""var maxItems = 10;\nvar apiEndpoint = '/api/data';""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['naming', 'constants', 'conventions']",Distinguishes constants from regular variables and follows JavaScript community standards.,Use UPPER_UNDERSCORED for constant values that don't change during execution.
DS_JS_010,drupal_javascript,naming,Include module name in function names,"Function names should include the module or theme name to avoid conflicts.",medium,"{""good"": ""function myModuleProcessData() {}\nDrupal.myModule = {};"", ""bad"": ""function processData() {}\nDrupal.data = {};""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['naming', 'namespacing', 'conflicts']",Prevents function name conflicts between different modules and themes.,Prefix function names with your module/theme name or create a namespaced object.
DS_JS_011,drupal_javascript,variables,Use let or const instead of var,"Declare variables with let or const instead of var for better scoping.",high,"{""good"": ""const userName = 'john';\nlet counter = 0;"", ""bad"": ""var userName = 'john';\nvar counter = 0;""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['variables', 'declarations', 'scoping']",let and const provide block scoping and prevent hoisting-related bugs.,Replace var declarations with const for immutable values and let for mutable variables.
DS_JS_012,drupal_javascript,variables,Declare variables at function beginning,"Declare all variables at the beginning of functions.",medium,"{""good"": ""function myFunction() {\n  let x, y, z;\n  // Function code\n}"", ""bad"": ""function myFunction() {\n  let x = 1;\n  // Some code\n  let y = 2;\n  // More code\n  let z = 3;\n}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['variables', 'declarations', 'organization']",Makes variable declarations clear and follows traditional JavaScript patterns.,Group all variable declarations at the top of function scope for clarity.
DS_JS_013,drupal_javascript,variables,One variable per line,"Declare each variable on a separate line.",medium,"{""good"": ""let firstName = 'John';\nlet lastName = 'Doe';\nlet age = 30;"", ""bad"": ""let firstName = 'John', lastName = 'Doe', age = 30;""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['variables', 'declarations', 'formatting']",Individual lines make code easier to read and debug.,Declare each variable on its own line with proper spacing.
DS_JS_014,drupal_javascript,operators,Use strict equality operators,"Use === and !== instead of == and != for comparisons.",critical,"{""good"": ""if (value === 'test') {}\nif (number !== 0) {}"", ""bad"": ""if (value == 'test') {}\nif (number != 0) {}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['operators', 'equality', 'comparison']",Strict equality prevents type coercion bugs and makes comparisons predictable.,Always use === and !== for comparisons. Configure ESLint to enforce this rule.
DS_JS_015,drupal_javascript,functions,Space after function keyword,"Include one space after the 'function' keyword.",medium,"{""good"": ""function myFunction() {}\nvar fn = function () {};"", ""bad"": ""function myFunction(){}\nvar fn = function(){}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['functions', 'formatting', 'spacing']",Consistent spacing improves code readability and follows community standards.,Add one space between 'function' keyword and parentheses.
DS_JS_016,drupal_javascript,functions,No space between function name and parenthesis,"Don't include space between function name and opening parenthesis.",medium,"{""good"": ""function myFunction() {}\nmyFunction();"", ""bad"": ""function myFunction () {}\nmyFunction ();""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['functions', 'formatting', 'spacing']",Consistent spacing rules improve code readability and maintainability.,Remove spaces between function names and their opening parentheses.
DS_JS_017,drupal_javascript,functions,Functions should return meaningful values,"Functions should attempt to return meaningful values when possible.",medium,"{""good"": ""function calculateTotal(items) {\n  return items.reduce((sum, item) => sum + item.price, 0);\n}"", ""bad"": ""function calculateTotal(items) {\n  console.log('Total calculated');\n  // No return value\n}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['functions', 'return-values', 'design']",Functions that return values are more testable and reusable.,Design functions to return useful values rather than just producing side effects.
DS_JS_018,drupal_javascript,control_structures,Always use curly braces,"Always use curly braces for control structures, even single statements.",medium,"{""good"": ""if (condition) {\n  doSomething();\n}"", ""bad"": ""if (condition)\n  doSomething();""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['control-structures', 'braces', 'formatting']",Curly braces prevent errors when adding additional statements and improve readability.,Always use curly braces for if/else/for/while statements regardless of statement count.
DS_JS_019,drupal_javascript,control_structures,Space between keyword and parenthesis,"Include one space between control structure keywords and opening parenthesis.",medium,"{""good"": ""if (condition) {}\nfor (let i = 0; i < length; i++) {}"", ""bad"": ""if(condition) {}\nfor(let i = 0; i < length; i++) {}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['control-structures', 'formatting', 'spacing']",Consistent spacing improves code readability and follows established conventions.,Add one space between control keywords (if/for/while) and opening parentheses.
DS_JS_020,drupal_javascript,control_structures,Use hasOwnProperty in for-in loops,"Wrap for...in loops with hasOwnProperty check to avoid inherited properties.",high,"{""good"": ""for (let key in object) {\n  if (object.hasOwnProperty(key)) {\n    // Process property\n  }\n}"", ""bad"": ""for (let key in object) {\n  // Process all properties including inherited\n}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['control-structures', 'loops', 'objects']",Prevents processing inherited properties from the prototype chain.,Always check hasOwnProperty() when iterating over object properties with for...in.
DS_JS_021,drupal_javascript,comments,Follow JSDoc standards,"Use JSDoc formatting for function and API documentation.",medium,"{""good"": ""/**\n * Calculates the total price.\n * @param {Array} items - Array of items\n * @return {number} Total price\n */\nfunction calculateTotal(items) {}"", ""bad"": ""// This function calculates total\nfunction calculateTotal(items) {}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['comments', 'documentation', 'jsdoc']",JSDoc provides standardized documentation that can be automatically processed.,Use proper JSDoc syntax with @param and @return tags for function documentation.
DS_JS_022,drupal_javascript,comments,Use descriptive capitalized sentences,"Comments should be descriptive sentences starting with capital letters.",medium,"{""good"": ""// Calculate the total price including tax.\nvar total = price * 1.08;"", ""bad"": ""// calc total\nvar total = price * 1.08;""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['comments', 'formatting', 'clarity']",Clear comments help other developers understand code intent and functionality.,Write complete sentences with proper capitalization for all comments.
DS_JS_023,drupal_javascript,comments,Place comments on separate lines,"Place comments on separate lines before the code they describe.",medium,"{""good"": ""// Initialize the counter.\nlet counter = 0;"", ""bad"": ""let counter = 0; // Initialize the counter""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['comments', 'placement', 'formatting']",Separate line comments are easier to read and don't interfere with code formatting.,Place explanatory comments on their own lines above the relevant code.
DS_JS_024,drupal_javascript_eslint,configuration,Use eslint-config-drupal,"Install and use the official eslint-config-drupal package for consistent linting.",high,"{""good"": ""npm install eslint-config-drupal\n// .eslintrc.json:\n{\n  \""extends\"": [\""drupal\""]\n}"", ""bad"": ""// Custom ESLint config without Drupal standards\n{\n  \""rules\"": {\n    // Random rules\n  }\n}""}","['https://www.drupal.org/docs/develop/standards/javascript/eslint-settings']","['eslint', 'configuration', 'tools']",Ensures consistent code quality and follows established Drupal JavaScript standards.,Install eslint-config-drupal and extend it in your .eslintrc.json configuration.
DS_JS_025,drupal_javascript_eslint,configuration,Create .eslintrc.json configuration,"Create .eslintrc.json configuration file for project-specific ESLint settings.",medium,"{""good"": ""{\n  \""extends\"": [\""drupal\""],\n  \""globals\"": {\n    \""myGlobal\"": true\n  }\n}"", ""bad"": ""// No ESLint configuration file\n// Using default settings only""}","['https://www.drupal.org/docs/develop/standards/javascript/eslint-settings']","['eslint', 'configuration', 'files']",Project-specific configuration allows customization while maintaining base standards.,Create .eslintrc.json in your module/theme root to extend Drupal config and add custom rules.
DS_JS_026,drupal_javascript_eslint,usage,Run ESLint on custom code,"Regularly run ESLint on modules/custom/ and themes/custom/ directories.",high,"{""good"": ""npx eslint modules/custom/\nnpx eslint themes/custom/"", ""bad"": ""// No linting of custom code\n// Only manual code review""}","['https://www.drupal.org/docs/develop/standards/javascript/eslint-settings']","['eslint', 'testing', 'quality']",Automated linting catches syntax errors and style violations before they reach production.,Set up npm scripts or CI/CD pipelines to run ESLint on all custom JavaScript code.
DS_JS_027,drupal_javascript_behaviors,patterns,Use Drupal.behaviors instead of document.ready,"Use Drupal.behaviors for initialization instead of jQuery document.ready.",critical,"{""good"": ""Drupal.behaviors.myModule = {\n  attach: function (context, settings) {\n    // Initialization code\n  }\n};"", ""bad"": ""$(document).ready(function() {\n  // Initialization code\n});""}","['https://www.drupal.org/docs/8/api/javascript-api/javascript-api-overview']","['behaviors', 'initialization', 'drupal-api']",Drupal.behaviors work with AJAX content loading and provide better integration with Drupal.,Replace $(document).ready() with Drupal.behaviors for proper Drupal integration.
DS_JS_028,drupal_javascript_behaviors,patterns,Use once() to prevent duplicate processing,"Use the once() function to ensure elements are processed only once.",critical,"{""good"": ""once('myBehavior', '.my-selector', context).forEach(function (element) {\n  // Process element\n});"", ""bad"": ""$('.my-selector', context).each(function() {\n  // May process elements multiple times\n});""}","['https://www.drupal.org/docs/8/api/javascript-api/javascript-api-overview']","['behaviors', 'once', 'performance']",Prevents duplicate event binding and processing when AJAX loads new content.,Use once() to mark elements as processed and avoid duplicate initialization.
DS_JS_029,drupal_javascript_behaviors,patterns,Use context parameter for DOM searches,"Use the context parameter to limit DOM searches to relevant sections.",high,"{""good"": ""once('myBehavior', '.my-selector', context).forEach(...);"", ""bad"": ""$('.my-selector').each(function() {\n  // Searches entire DOM\n});""}","['https://www.drupal.org/docs/8/api/javascript-api/javascript-api-overview']","['behaviors', 'context', 'performance']",Context parameter improves performance by limiting DOM searches to newly added content.,Always use the context parameter when searching for elements in Drupal behaviors.
DS_JS_030,drupal_javascript_behaviors,dependencies,Declare JavaScript dependencies,"Declare all JavaScript dependencies in .libraries.yml files.",high,"{""good"": ""# mymodule.libraries.yml\nmybehavior:\n  js:\n    js/mybehavior.js: {}\n  dependencies:\n    - core/drupal\n    - core/jquery\n    - core/once"", ""bad"": ""// JavaScript file without declared dependencies\n// Assumes jQuery and Drupal are available""}","['https://www.drupal.org/docs/8/api/javascript-api/javascript-api-overview']","['dependencies', 'libraries', 'asset-management']",Proper dependency declaration ensures required libraries are loaded before your code.,List all required dependencies in your .libraries.yml file for proper loading order.
DS_JS_031,drupal_javascript_behaviors,structure,Include detach method for cleanup,"Include detach method in behaviors for cleanup when content is removed.",medium,"{""good"": ""Drupal.behaviors.myModule = {\n  attach: function (context, settings) {},\n  detach: function (context, settings, trigger) {\n    // Cleanup code\n  }\n};"", ""bad"": ""Drupal.behaviors.myModule = {\n  attach: function (context, settings) {\n    // Only attach, no cleanup\n  }\n};""}","['https://www.drupal.org/docs/8/api/javascript-api/javascript-api-overview']","['behaviors', 'cleanup', 'memory-management']",Detach methods prevent memory leaks and clean up event listeners when content is removed.,Add detach methods to behaviors that create event listeners or modify the DOM.
DS_JS_032,drupal_javascript,operators,Avoid comma operator,"Avoid using the comma operator except in for loop initialization.",low,"{""good"": ""var a = 1;\nvar b = 2;"", ""bad"": ""var a = 1, b = 2;""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['operators', 'comma', 'readability']",Comma operator can be confusing and makes code harder to debug.,Use separate statements instead of comma operator for better clarity.
DS_JS_033,drupal_javascript,operators,Space around operators for readability,"Add spaces around operators for better readability when appropriate.",medium,"{""good"": ""var result = a + b * c;\nvar isValid = (x > 0) && (y < 10);"", ""bad"": ""var result = a+b*c;\nvar isValid = (x>0)&&(y<10);""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['operators', 'spacing', 'readability']",Proper spacing around operators improves code readability and maintainability.,Add spaces around operators while respecting operator precedence grouping.
DS_JS_034,drupal_javascript,functions,Optional arguments at end of signature,"Place optional function arguments at the end of the parameter list.",medium,"{""good"": ""function processData(required1, required2, optional1, optional2) {}"", ""bad"": ""function processData(required1, optional1, required2, optional2) {}""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['functions', 'parameters', 'design']",Optional parameters at the end make function calls clearer and more predictable.,Organize function parameters with required parameters first followed by optional ones.
DS_JS_035,drupal_javascript,syntax,Return values on same line,"Return values must start on the same line as the return statement.",medium,"{""good"": ""return {\n  key: 'value',\n  other: 'data'\n};"", ""bad"": ""return\n{\n  key: 'value',\n  other: 'data'\n};""}","['https://www.drupal.org/docs/develop/standards/javascript/javascript-coding-standards']","['syntax', 'return', 'semicolons']",Prevents automatic semicolon insertion from breaking return statements.,Start return values on the same line as the return keyword to avoid ASI issues.